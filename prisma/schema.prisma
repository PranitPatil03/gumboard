// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth required models
model User {
  id                      String                        @id @default(cuid())
  name                    String?
  email                   String                        @unique
  emailVerified           Boolean                       @default(false)
  image                   String?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  organizationId          String?
  isAdmin                 Boolean                       @default(false) // Admin role for organization
  organization            Organization?                 @relation(fields: [organizationId], references: [id])
  invitedOrganizations    OrganizationInvite[]
  createdSelfServeInvites OrganizationSelfServeInvite[]
  notes                   Note[]

  sessions Session[]
  accounts Account[]

  @@index([organizationId], name: "idx_user_org")
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Organization {
  id               String                        @id @default(cuid())
  name             String
  slackWebhookUrl  String?
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  members          User[]
  invites          OrganizationInvite[]
  boards           Board[]
  selfServeInvites OrganizationSelfServeInvite[]

  @@map("organizations")
}

model Board {
  id               String       @id @default(cuid())
  name             String
  description      String?
  isPublic         Boolean      @default(false)
  sendSlackUpdates Boolean      @default(true)
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  notes            Note[]

  // Performance indexes
  @@index([organizationId, createdAt], name: "idx_board_org_created")
  @@map("boards")
}

model Note {
  id             String          @id @default(cuid())
  color          String          @default("#fef3c7") // Default yellow color
  checklistItems ChecklistItem[]
  archivedAt     DateTime? // Track archived status
  slackMessageId String?
  boardId        String
  board          Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy      String
  user           User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime? // Soft delete timestamp

  // Performance indexes
  @@index([boardId, deletedAt], name: "idx_note_board_deleted")
  @@index([boardId, createdAt], name: "idx_note_board_created")
  @@index([createdBy, deletedAt], name: "idx_note_user_deleted")
  @@map("notes")
}

model ChecklistItem {
  id             String   @id @default(cuid())
  content        String   @db.Text
  checked        Boolean  @default(false)
  order          Int      @default(0)
  noteId         String
  slackMessageId String?
  note           Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([noteId])
  @@index([noteId, order])
  @@map("checklist_items")
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      String
  user           User         @relation(fields: [invitedBy], references: [id])
  createdAt      DateTime     @default(now())
  status         InviteStatus @default(PENDING)

  @@unique([email, organizationId])
  @@map("organization_invites")
}

model OrganizationSelfServeInvite {
  id             String       @id @default(cuid())
  token          String?      @unique // Cryptographically secure token for the URL
  name           String // Name/description for the invite link
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  user           User         @relation(fields: [createdBy], references: [id])
  createdAt      DateTime     @default(now())
  expiresAt      DateTime? // Optional expiration date
  usageLimit     Int? // Optional usage limit
  usageCount     Int          @default(0) // Track how many times it's been used
  isActive       Boolean      @default(true)

  @@map("organization_self_serve_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
